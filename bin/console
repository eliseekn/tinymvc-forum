#!/usr/bin/env/php 

<?php

/**
 * TinyMVC
 * 
 * PHP framework based on MVC architecture
 * 
 * @copyright 2019-2020 - N'Guessan Kouadio ElisÃ©e (eliseekn@gmail.com)
 * @license MIT (https://opensource.org/licenses/MIT)
 * @link https://github.com/eliseekn/TinyMVC
 */

/**
 * Application console interface
 */

require __DIR__ . DIRECTORY_SEPARATOR . '../vendor/autoload.php';
require __DIR__ . DIRECTORY_SEPARATOR . '../config/app.php';
require __DIR__ . DIRECTORY_SEPARATOR . '../config/database.php';
require __DIR__ . DIRECTORY_SEPARATOR . '../config/env.php';

//get migration class instance
function getMigration(string $migration)
{
    $migration = 'App\Database\Migrations\\' . $migration;

    if (!class_exists($migration) || !method_exists($migration, 'migrate')) {
        exit('[-] Invalid migration class "' . $migration . '"' . PHP_EOL);
    }

    return new $migration();
}

//get seed class instance
function getSeed(string $seed)
{
    $seed = 'App\Database\Seeds\\' . $seed;

    if (!class_exists($seed) || !method_exists($seed, 'sow')) {
        exit('[-] Invalid seed class "' . $seed . '"' . PHP_EOL);
    }

    return new $seed();
}

//set migrations and seeds folders paths
$migrations_folder = 'app' . DIRECTORY_SEPARATOR . 'Database' . DIRECTORY_SEPARATOR . 'Migrations';
$seeds_folder = 'app' . DIRECTORY_SEPARATOR . 'Database' . DIRECTORY_SEPARATOR . 'Seeds';

//get command line arguments
$options = getopt('', ['help::', 'migration::', 'seed::', 'clear::', 'delete::', 'rollback::']);

//handle command line arguments
if (
    array_key_exists('migration', $options) &&
    !array_key_exists('seed', $options) &&
    !array_key_exists('clear', $options) &&
    !array_key_exists('delete', $options) &&
    !array_key_exists('rollback', $options)
) {
    if ($options['migration'] !== 'all') {
        $migration = $options['migration'];

        if (strpos($migration, ',') === false) {
            $migration = getMigration($migration);
            $migration->migrate();
        } else {
            $migrations = explode(',', $migration);

            foreach ($migrations as $migration) {
                $migration = getMigration($migration);
                $migration->migrate();
            }
        }
    } else {
        $objects = scandir($migrations_folder);

        foreach ($objects as $object) {
            if ($object != '.' && $object != '..') {
                $migration = explode('.', basename($object))[0];
                $migration = getMigration($migration);
                $migration->migrate();
            }
        }
    }

    exit('[+] Operations done successfully.' . PHP_EOL);
} else if (
    array_key_exists('migration', $options) &&
    array_key_exists('seed', $options) &&
    !array_key_exists('clear', $options) &&
    !array_key_exists('delete', $options) &&
    !array_key_exists('rollback', $options)
) {
    if ($options['migration'] !== 'all') {
        $migration = $options['migration'];

        if (strpos($migration, ',') === false) {
            $migration = getMigration($migration);
            $migration->migrate();
        } else {
            $migrations = explode(',', $migration);

            foreach ($migrations as $migration) {
                $migration = getMigration($migration);
                $migration->migrate();
            }
        }
    } else {
        $objects = scandir($migrations_folder);

        foreach ($objects as $object) {
            if ($object != '.' && $object != '..') {
                $migration = explode('.', basename($object))[0];
                $migration = getMigration($migration);
                $migration->migrate();
            }
        }
    }

    if ($options['seed'] !== 'all') {
        $seed = $options['seed'];

        if (strpos($seed, ',') === false) {
            $seed = $seed = getSeed($seed);
            $seed->sow();
        } else {
            $seeds = explode(',', $seed);

            foreach ($seeds as $seed) {
                $seed = getSeed($seed);
                $seed->sow();
            }
        }
    } else {
        $objects = scandir($seeds_folder);

        foreach ($objects as $object) {
            if ($object != '.' && $object != '..') {
                $seed = explode('.', basename($object))[0];
                $seed = $seed = getSeed($seed);
                $seed->sow();
            }
        }
    }

    exit('[+] Operations done successfully.' . PHP_EOL);
} else if (
    array_key_exists('migration', $options) &&
    array_key_exists('seed', $options) &&
    array_key_exists('rollback', $options) &&
    !array_key_exists('clear', $options) &&
    !array_key_exists('delete', $options)
) {
    if ($options['migration'] !== 'all') {
        $migration = $options['migration'];

        if (strpos($migration, ',') === false) {
            $migration = getMigration($migration);
            $migration->rollback();
        } else {
            $migrations = explode(',', $migration);

            foreach ($migrations as $migration) {
                $migration = getMigration($migration);
                $migration->rollback();
            }
        }
    } else {
        $objects = scandir($migrations_folder);

        foreach ($objects as $object) {
            if ($object != '.' && $object != '..') {
                $migration = explode('.', basename($object))[0];
                $migration = getMigration($migration);
                $migration->rollback();
            }
        }
    }

    if ($options['seed'] !== 'all') {
        $seed = $options['seed'];

        if (strpos($seed, ',') === false) {
            $seed = $seed = getSeed($seed);
            $seed->sow();
        } else {
            $seeds = explode(',', $seed);

            foreach ($seeds as $seed) {
                $seed = getSeed($seed);
                $seed->sow();
            }
        }
    } else {
        $objects = scandir($seeds_folder);

        foreach ($objects as $object) {
            if ($object != '.' && $object != '..') {
                $seed = explode('.', basename($object))[0];
                $seed = getSeed($seed);
                $seed->sow();
            }
        }
    }

    exit('[+] Operations done successfully.' . PHP_EOL);
} else if (
    array_key_exists('migration', $options) &&
    array_key_exists('rollback', $options) &&
    !array_key_exists('seed', $options) &&
    !array_key_exists('clear', $options) &&
    !array_key_exists('delete', $options)
) {
    if ($options['migration'] !== 'all') {
        $migration = $options['migration'];

        if (strpos($migration, ',') === false) {
            $migration = getMigration($migration);
            $migration->rollback();
        } else {
            $migrations = explode(',', $migration);

            foreach ($migrations as $migration) {
                $migration = getMigration($migration);
                $migration->rollback();
            }
        }
    } else {
        $objects = scandir($migrations_folder);

        foreach ($objects as $object) {
            if ($object != '.' && $object != '..') {
                $migration = explode('.', basename($object))[0];
                $migration = getMigration($migration);
                $migration->rollback();
            }
        }
    }

    exit('[+] Operations done successfully.' . PHP_EOL);
} else if (
    array_key_exists('migration', $options) &&
    array_key_exists('clear', $options) &&
    !array_key_exists('rollback', $options) &&
    !array_key_exists('seed', $options) &&
    !array_key_exists('delete', $options)
) {
    if ($options['migration'] !== 'all') {
        $migration = $options['migration'];

        if (strpos($migration, ',') === false) {
            $migration = getMigration($migration);
            $migration->clear();
        } else {
            $migrations = explode(',', $migration);

            foreach ($migrations as $migration) {
                $migration = getMigration($migration);
                $migration->clear();
            }
        }
    } else {
        $objects = scandir($migrations_folder);

        foreach ($objects as $object) {
            if ($object != '.' && $object != '..') {
                $migration = explode('.', basename($object))[0];
                $migration = getMigration($migration);
                $migration->clear();
            }
        }
    }

    exit('[+] Operations done successfully.' . PHP_EOL);
} else if (
    array_key_exists('migration', $options) &&
    array_key_exists('delete', $options) &&
    !array_key_exists('clear', $options) &&
    !array_key_exists('rollback', $options) &&
    !array_key_exists('seed', $options)
) {
    if ($options['migration'] !== 'all') {
        $migration = $options['migration'];

        if (strpos($migration, ',') === false) {
            $migration = getMigration($migration);
            $migration->delete();
        } else {
            $migrations = explode(',', $migration);

            foreach ($migrations as $migration) {
                $migration = getMigration($migration);
                $migration->delete();
            }
        }
    } else {
        $objects = scandir($migrations_folder);

        foreach ($objects as $object) {
            if ($object != '.' && $object != '..') {
                $migration = explode('.', basename($object))[0];
                $migration = getMigration($migration);
                $migration->delete();
            }
        }
    }

    exit('[+] Operations done successfully.' . PHP_EOL);
} else if (
    array_key_exists('seed', $options) &&
    !array_key_exists('migration', $options) &&
    !array_key_exists('delete', $options) &&
    !array_key_exists('clear', $options) &&
    !array_key_exists('rollback', $options)
) {
    if ($options['seed'] !== 'all') {
        $seed = $options['seed'];

        if (strpos($seed, ',') === false) {
            $seed = $seed = getSeed($seed);
            $seed->sow();
        } else {
            $seeds = explode(',', $seed);

            foreach ($seeds as $seed) {
                $seed = getSeed($seed);
                $seed->sow();
            }
        }
    } else {
        $objects = scandir($seeds_folder);

        foreach ($objects as $object) {
            if ($object != '.' && $object != '..') {
                $seed = explode('.', basename($object))[0];
                $seed = getSeed($seeder);
                $seed->sow();
            }
        }
    }

    exit('[+] Operations done successfully.' . PHP_EOL);
} else if (array_key_exists('help', $options)) {
    $help_message = '[+] Commands list:' . PHP_EOL;
    $help_message .= '      --migration=all                             Migrate all tables' . PHP_EOL;
    $help_message .= '      --migration=UsersTable                      Migrate UsersTable only' . PHP_EOL;
    $help_message .= '      --migration=UsersTable,CommentsTable        Migrate UsersTable and CommentsTable only' . PHP_EOL;
    $help_message .= '      --migration=UsersTable --clear              Truncate UsersTable only' . PHP_EOL;
    $help_message .= '      --migration=all --clear                     Truncate all tables' . PHP_EOL;
    $help_message .= '      --migration=UsersTable,PostsTable --delete  Drop UsersTable and PostsTable only' . PHP_EOL;
    $help_message .= '      --migration=all --delete                    Drop all tables' . PHP_EOL;
    $help_message .= '      --seed=all                                  Insert all seeds' . PHP_EOL;
    $help_message .= '      --seed=UserSeed                             Insert UserSeed only' . PHP_EOL;
    $help_message .= '      --seed=UserSeed,CommentSeed                 Insert UserSeed and CommentSeed only' . PHP_EOL;
    $help_message .= '      --migration=all --seed=all                  Migrate all tables and insert all seeds' . PHP_EOL;
    $help_message .= '      --migration=all --rollback                  Revert migrations for all tables' . PHP_EOL;
    $help_message .= '      --migration=all --rollback --seed=all       Revert migrations for all tables and insert all seeds' . PHP_EOL;
    exit($help_message);
} else {
    exit('[-] Invalid command line arguments, print "--help" for commands list' . PHP_EOL);
}